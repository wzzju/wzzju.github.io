<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="881px" preserveAspectRatio="none" style="width:2007px;height:881px;background:#FFFFFF;" version="1.1" viewBox="0 0 2007 881" width="2007px" zoomAndPan="magnify"><defs/><g><rect fill="#E0E0E0" height="677.9028" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="273.5" y="107.7373"/><rect fill="#E0E0E0" height="583.0596" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="545.5" y="148.4746"/><rect fill="#E0E0E0" height="474.8477" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="776.5" y="229.3179"/><rect fill="#E0E0E0" height="326.5298" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="1005.5" y="256.6865"/><rect fill="#E0E0E0" height="258.4238" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="1245.5" y="297.4238"/><rect fill="#E0E0E0" height="27.3687" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="1550.5" y="324.7925"/><rect fill="#E0E0E0" height="135.5806" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="1739" y="379.5298"/><rect fill="#E0E0E0" height="27.3687" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="1927" y="420.2671"/><line style="stroke:#2A86E2;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="75" x2="75" y1="78.3687" y2="803.6401"/><line style="stroke:#2A86E2;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="278.5" x2="278.5" y1="78.3687" y2="803.6401"/><line style="stroke:#2A86E2;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="550" x2="550" y1="78.3687" y2="803.6401"/><line style="stroke:#2A86E2;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="781" x2="781" y1="78.3687" y2="803.6401"/><line style="stroke:#2A86E2;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="1010" x2="1010" y1="78.3687" y2="803.6401"/><line style="stroke:#2A86E2;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="1250.5" x2="1250.5" y1="78.3687" y2="803.6401"/><line style="stroke:#2A86E2;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="1555.5" x2="1555.5" y1="78.3687" y2="803.6401"/><line style="stroke:#2A86E2;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="1743.5" x2="1743.5" y1="78.3687" y2="803.6401"/><line style="stroke:#2A86E2;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="1932" x2="1932" y1="78.3687" y2="803.6401"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="135" x="5" y="76.0591">_xla_callable_uncached</text><ellipse cx="75.5" cy="13.5" fill="#2A86E2" rx="8" ry="8" style="stroke:#1A66C2;stroke-width:0.5;"/><path d="M75.5,21.5 L75.5,48.5 M62.5,29.5 L88.5,29.5 M75.5,48.5 L62.5,63.5 M75.5,48.5 L88.5,63.5 " fill="none" style="stroke:#1A66C2;stroke-width:0.5;"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="135" x="5" y="813.6992">_xla_callable_uncached</text><ellipse cx="75.5" cy="824.5088" fill="#2A86E2" rx="8" ry="8" style="stroke:#1A66C2;stroke-width:0.5;"/><path d="M75.5,832.5088 L75.5,859.5088 M62.5,840.5088 L88.5,840.5088 M75.5,859.5088 L62.5,874.5088 M75.5,859.5088 L88.5,874.5088 " fill="none" style="stroke:#1A66C2;stroke-width:0.5;"/><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="152" x="202.5" y="50"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="138" x="209.5" y="68.0591">XlaComputation.compile</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="152" x="202.5" y="802.6401"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="138" x="209.5" y="820.6992">XlaComputation.compile</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="289" x="406" y="50"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="275" x="413" y="68.0591">XlaCompiledComputation.from_xla_computation</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="289" x="406" y="802.6401"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="275" x="413" y="820.6992">XlaCompiledComputation.from_xla_computation</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="149" x="707" y="50"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="135" x="714" y="68.0591">compile_or_get_cached</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="149" x="707" y="802.6401"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="135" x="714" y="820.6992">compile_or_get_cached</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="113" x="954" y="50"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="99" x="961" y="68.0591">backend_compile</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="113" x="954" y="802.6401"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="99" x="961" y="820.6992">backend_compile</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="136" x="1182.5" y="50"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="122" x="1189.5" y="68.0591">PyClient::CompileMlir</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="136" x="1182.5" y="802.6401"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="122" x="1189.5" y="820.6992">PyClient::CompileMlir</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="140" x="1485.5" y="50"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="126" x="1492.5" y="68.0591">ParseMlirModuleString</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="140" x="1485.5" y="802.6401"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="126" x="1492.5" y="820.6992">ParseMlirModuleString</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="217" x="1635.5" y="50"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="203" x="1642.5" y="68.0591">PjRtStreamExecutorClient::Compile</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="217" x="1635.5" y="802.6401"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="203" x="1642.5" y="820.6992">PjRtStreamExecutorClient::Compile</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="138" x="1863" y="50"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="124" x="1870" y="68.0591">MlirToXlaComputation</text><rect fill="#CCCCCC" height="27.3687" rx="2.5" ry="2.5" style="stroke:#AAAAAA;stroke-width:0.5;" width="138" x="1863" y="802.6401"/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="124" x="1870" y="820.6992">MlirToXlaComputation</text><rect fill="#E0E0E0" height="677.9028" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="273.5" y="107.7373"/><rect fill="#E0E0E0" height="583.0596" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="545.5" y="148.4746"/><rect fill="#E0E0E0" height="474.8477" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="776.5" y="229.3179"/><rect fill="#E0E0E0" height="326.5298" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="1005.5" y="256.6865"/><rect fill="#E0E0E0" height="258.4238" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="1245.5" y="297.4238"/><rect fill="#E0E0E0" height="27.3687" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="1550.5" y="324.7925"/><rect fill="#E0E0E0" height="135.5806" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="1739" y="379.5298"/><rect fill="#E0E0E0" height="27.3687" style="stroke:#2A86E2;stroke-width:1.0;" width="10" x="1927" y="420.2671"/><polygon fill="#000000" points="261.5,103.7373,271.5,107.7373,261.5,111.7373,265.5,107.7373" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="75.5" x2="267.5" y1="107.7373" y2="107.7373"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="8" x="82.5" y="103.4277">1</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="88" x="94.5" y="103.4277">调用compile方法</text><polygon fill="#000000" points="533.5,144.4746,543.5,148.4746,533.5,152.4746,537.5,148.4746" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="283.5" x2="539.5" y1="148.4746" y2="148.4746"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="8" x="290.5" y="137.4807">2</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="183" x="302.5" y="130.7964">调用from_xla_computation方法，</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="231" x="302.5" y="144.165">用于构建一个XlaCompiledComputation对象</text><polygon fill="#000000" points="764.5,225.3179,774.5,229.3179,764.5,233.3179,768.5,229.3179" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="555.5" x2="770.5" y1="229.3179" y2="229.3179"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="8" x="562.5" y="198.271">3</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="190" x="574.5" y="171.5337">调用compile_or_get_cached方法，</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="180" x="574.5" y="184.9023">其会调用mlir.module_to_string将</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="176" x="574.5" y="198.271">mlir.Module转为字符串，接着使用</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="187" x="574.5" y="211.6396">所提供的后端将mlir.Module字符表示</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="44" x="574.5" y="225.0083">进行编译</text><polygon fill="#000000" points="993.5,252.6865,1003.5,256.6865,993.5,260.6865,997.5,256.6865" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="786.5" x2="999.5" y1="256.6865" y2="256.6865"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="8" x="793.5" y="252.377">4</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="66" x="805.5" y="252.377">进行后端编译</text><polygon fill="#000000" points="1233.5,293.4238,1243.5,297.4238,1233.5,301.4238,1237.5,297.4238" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="1015.5" x2="1239.5" y1="297.4238" y2="297.4238"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="8" x="1022.5" y="286.4299">5</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="107" x="1034.5" y="279.7456">python调用c++函数</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="96" x="1034.5" y="293.1143">backend.compile</text><polygon fill="#000000" points="1538.5,320.7925,1548.5,324.7925,1538.5,328.7925,1542.5,324.7925" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="1255.5" x2="1544.5" y1="324.7925" y2="324.7925"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="8" x="1262.5" y="320.4829">6</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="264" x="1274.5" y="320.4829">将字符串表示的mlir.Module解析为mlir::ModuleOp</text><polygon fill="#000000" points="1266.5,348.1611,1256.5,352.1611,1266.5,356.1611,1262.5,352.1611" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="1260.5" x2="1554.5" y1="352.1611" y2="352.1611"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="8" x="1272.5" y="347.8516">7</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="110" x="1284.5" y="347.8516">返回mlir::ModuleOp</text><polygon fill="#000000" points="1727,375.5298,1737,379.5298,1727,383.5298,1731,379.5298" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="1255.5" x2="1733" y1="379.5298" y2="379.5298"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="8" x="1262.5" y="375.2202">8</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="110" x="1274.5" y="375.2202">编译mlir::ModuleOp</text><polygon fill="#000000" points="1915,416.2671,1925,420.2671,1915,424.2671,1919,420.2671" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="1749" x2="1921" y1="420.2671" y2="420.2671"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="8" x="1756" y="409.2732">9</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="132" x="1768" y="402.5889">将mlir::ModuleOp转换为</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="147" x="1768" y="415.9575">c++定义的XlaComputation</text><polygon fill="#000000" points="1760,443.6357,1750,447.6357,1760,451.6357,1756,447.6357" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="1754" x2="1931" y1="447.6357" y2="447.6357"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="16" x="1766" y="443.3262">10</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="134" x="1786" y="443.3262">返回XlaComputation对象</text><polygon fill="#000000" points="1266.5,511.1104,1256.5,515.1104,1266.5,519.1104,1262.5,515.1104" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="1260.5" x2="1743" y1="515.1104" y2="515.1104"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="16" x="1272.5" y="490.7478">11</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="307" x="1292.5" y="470.6948">后续与tf中使用xla机制类似，即调用LocalClient::Compile、</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="381" x="1292.5" y="484.0635">LocalService::CompileExecutables、GpuCompiler::RunHloPasses、</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="432" x="1292.5" y="497.4321">GpuCompiler::RunBackend等方法将XlaComputation对象编译可执行二进制文件，</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="184" x="1292.5" y="510.8008">并转为父类PjRtExecutable指针返回</text><polygon fill="#000000" points="1026.5,551.8477,1016.5,555.8477,1026.5,559.8477,1022.5,555.8477" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="1020.5" x2="1249.5" y1="555.8477" y2="555.8477"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="16" x="1032.5" y="544.8538">12</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="154" x="1052.5" y="538.1694">将编译得到的可执行二进制文件</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="186" x="1052.5" y="551.5381">包装在PyExecutable类型对象中返回</text><polygon fill="#000000" points="797.5,579.2163,787.5,583.2163,797.5,587.2163,793.5,583.2163" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="791.5" x2="1009.5" y1="583.2163" y2="583.2163"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="16" x="803.5" y="578.9067">13</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="175" x="823.5" y="578.9067">返回编译得到的PyExecutable对象</text><polygon fill="#000000" points="566.5,700.1655,556.5,704.1655,566.5,708.1655,562.5,704.1655" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="560.5" x2="780.5" y1="704.1655" y2="704.1655"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="16" x="572.5" y="653.0657">14</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="124" x="592.5" y="606.2754">使用functools.partial将</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="131" x="592.5" y="619.644">编译得到的PyExecutable</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="165" x="592.5" y="633.0127">对象绑定到_execute_compiled</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="159" x="592.5" y="646.3813">或者_execute_replicated函数</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="157" x="592.5" y="659.75">参数中，partial的结果将作为所</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="165" x="592.5" y="673.1187">构建XlaCompiledComputation</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="174" x="592.5" y="686.4873">对象的unsafe_call属性，返回构建</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="176" x="592.5" y="699.856">的XlaCompiledComputation对象</text><polygon fill="#000000" points="294.5,727.5342,284.5,731.5342,294.5,735.5342,290.5,731.5342" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="288.5" x2="549.5" y1="731.5342" y2="731.5342"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="16" x="300.5" y="727.2246">15</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="187" x="320.5" y="727.2246">返回XlaCompiledComputation对象</text><polygon fill="#000000" points="86.5,781.6401,76.5,785.6401,86.5,789.6401,82.5,785.6401" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="80.5" x2="277.5" y1="785.6401" y2="785.6401"/><text fill="#333333" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="16" x="92.5" y="767.9619">16</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="154" x="112.5" y="754.5933">将XlaCompiledComputation</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="119" x="112.5" y="767.9619">对象的unsafe_call属性</text><text fill="#333333" font-family="Verdana" font-size="11" lengthAdjust="spacing" textLength="88" x="112.5" y="781.3306">作为其调用返回值</text><!--MD5=[8d07ca54de49d5143e65807b66951312]
@startuml jax_compile
!theme reddress-lightblue

' title 编译可执行文件

actor _xla_callable_uncached as caller
participant "XlaComputation.compile" as xc
participant "XlaCompiledComputation.from_xla_computation" as xcc
participant "compile_or_get_cached" as cgc
participant "backend_compile" as bc
participant "PyClient::CompileMlir" as pc
participant "ParseMlirModuleString" as pms
participant "PjRtStreamExecutorClient::Compile" as pjrt
participant "MlirToXlaComputation" as mtx
autonumber
caller->xc:调用compile方法
activate xc
xc->xcc:调用from_xla_computation方法，\n用于构建一个XlaCompiledComputation对象
activate xcc
xcc->cgc:调用compile_or_get_cached方法，\n其会调用mlir.module_to_string将\nmlir.Module转为字符串，接着使用\n所提供的后端将mlir.Module字符表示\n进行编译
activate cgc
cgc->bc:进行后端编译
activate bc
bc->pc:python调用c++函数\nbackend.compile
activate pc
pc->pms:将字符串表示的mlir.Module解析为mlir::ModuleOp
activate pms
pms- ->pc:返回mlir::ModuleOp
deactivate pms
pc->pjrt:编译mlir::ModuleOp
activate pjrt
pjrt->mtx:将mlir::ModuleOp转换为\nc++定义的XlaComputation
activate mtx
mtx- ->pjrt:返回XlaComputation对象
deactivate mtx
pjrt- ->pc:后续与tf中使用xla机制类似，即调用LocalClient::Compile、\nLocalService::CompileExecutables、GpuCompiler::RunHloPasses、\nGpuCompiler::RunBackend等方法将XlaComputation对象编译可执行二进制文件，\n并转为父类PjRtExecutable指针返回
deactivate pjrt
pc- ->bc:将编译得到的可执行二进制文件\n包装在PyExecutable类型对象中返回
deactivate pc
bc- ->cgc:返回编译得到的PyExecutable对象
deactivate bc
cgc- ->xcc:使用functools.partial将\n编译得到的PyExecutable\n对象绑定到_execute_compiled\n或者_execute_replicated函数\n参数中，partial的结果将作为所\n构建XlaCompiledComputation\n对象的unsafe_call属性，返回构建\n的XlaCompiledComputation对象
deactivate cgc
xcc- ->xc:返回XlaCompiledComputation对象
deactivate xcc
xc- ->caller:将XlaCompiledComputation\n对象的unsafe_call属性\n作为其调用返回值
deactivate xc
@enduml

@startuml jax_compile



skinparam stereotypeCBackgroundColor 1a66c2
skinparam backgroundColor fff







skinparam circledCharacter {
  radius 8
  fontSize 11
  fontName Verdana
}

skinparam class {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11

  attributeFontColor 333
  attributeFontSize 11
  attributeIconSize 11
}


skinparam actor {
    backgroundColor 2a86e2
  borderColor 1a66c2
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam participant {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam collections {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam SequenceBox{
    backgroundColor e0e0e0
  borderColor cccccc
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam interface {
    backgroundColor 2a86e2
  borderColor 1a66c2
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam component {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam node {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam database {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam queue {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam usecase {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam activity {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam sequence {
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11

  lifeLineBorderColor 2a86e2
  lifeLineBackgroundColor e0e0e0
}

skinparam boundary {
    backgroundColor 2a86e2
  borderColor 1a66c2
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam control {
    backgroundColor 2a86e2
  borderColor 1a66c2
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam entity {
    backgroundColor 2a86e2
  borderColor 1a66c2
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam state {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
  startColor 2a86e2
  endColor 1a66c2
}


skinparam object {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}


skinparam note {
    backgroundColor 2a86e2
  borderColor 1a66c2
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam cloud {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam rectangle {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam storage {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


actor _xla_callable_uncached as caller
participant "XlaComputation.compile" as xc
participant "XlaCompiledComputation.from_xla_computation" as xcc
participant "compile_or_get_cached" as cgc
participant "backend_compile" as bc
participant "PyClient::CompileMlir" as pc
participant "ParseMlirModuleString" as pms
participant "PjRtStreamExecutorClient::Compile" as pjrt
participant "MlirToXlaComputation" as mtx
autonumber
caller->xc:调用compile方法
activate xc
xc->xcc:调用from_xla_computation方法，\n用于构建一个XlaCompiledComputation对象
activate xcc
xcc->cgc:调用compile_or_get_cached方法，\n其会调用mlir.module_to_string将\nmlir.Module转为字符串，接着使用\n所提供的后端将mlir.Module字符表示\n进行编译
activate cgc
cgc->bc:进行后端编译
activate bc
bc->pc:python调用c++函数\nbackend.compile
activate pc
pc->pms:将字符串表示的mlir.Module解析为mlir::ModuleOp
activate pms
pms- ->pc:返回mlir::ModuleOp
deactivate pms
pc->pjrt:编译mlir::ModuleOp
activate pjrt
pjrt->mtx:将mlir::ModuleOp转换为\nc++定义的XlaComputation
activate mtx
mtx- ->pjrt:返回XlaComputation对象
deactivate mtx
pjrt- ->pc:后续与tf中使用xla机制类似，即调用LocalClient::Compile、\nLocalService::CompileExecutables、GpuCompiler::RunHloPasses、\nGpuCompiler::RunBackend等方法将XlaComputation对象编译可执行二进制文件，\n并转为父类PjRtExecutable指针返回
deactivate pjrt
pc- ->bc:将编译得到的可执行二进制文件\n包装在PyExecutable类型对象中返回
deactivate pc
bc- ->cgc:返回编译得到的PyExecutable对象
deactivate bc
cgc- ->xcc:使用functools.partial将\n编译得到的PyExecutable\n对象绑定到_execute_compiled\n或者_execute_replicated函数\n参数中，partial的结果将作为所\n构建XlaCompiledComputation\n对象的unsafe_call属性，返回构建\n的XlaCompiledComputation对象
deactivate cgc
xcc- ->xc:返回XlaCompiledComputation对象
deactivate xcc
xc- ->caller:将XlaCompiledComputation\n对象的unsafe_call属性\n作为其调用返回值
deactivate xc
@enduml

PlantUML version 1.2022.5(Sat Apr 30 18:55:52 CST 2022)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>