<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="558.3333px" preserveAspectRatio="none" style="width:838px;height:558px;background:#00000000;" version="1.1" viewBox="0 0 838 558" width="838.5417px" zoomAndPan="magnify"><defs/><g><!--MD5=[f78cde19058db7de6d91dc3a0e8c42f3]
class GpuConvAlgorithmPicker::ReferenceResult--><rect codeLine="3" height="98.818" id="GpuConvAlgorithmPicker::ReferenceResult" rx="4.1667" ry="4.1667" style="stroke:#2FA4E7;stroke-width:1.0416666666666667;fill:none;" width="309.375" x="240.1042" y="447.9167"/><ellipse cx="268.2813" cy="465.0808" fill="#EDF0F2" rx="10.4167" ry="10.4167" style="stroke:#BABDBF;stroke-width:1.0416666666666667;"/><path d="M270.1917,469.5058 Q269.7644,469.7255 269.2944,469.8354 Q268.8245,469.9453 268.3057,469.9453 Q266.4624,469.9453 265.4919,468.7307 Q264.5215,467.5161 264.5215,465.2212 Q264.5215,462.9201 265.4919,461.7055 Q266.4624,460.4909 268.3057,460.4909 Q268.8245,460.4909 269.3005,460.6008 Q269.7766,460.7107 270.1917,460.9304 L270.1917,462.9323 Q269.7278,462.5051 269.2914,462.3067 Q268.855,462.1084 268.3911,462.1084 Q267.4023,462.1084 266.8988,462.8927 Q266.3953,463.677 266.3953,465.2212 Q266.3953,466.7592 266.8988,467.5435 Q267.4023,468.3278 268.3911,468.3278 Q268.855,468.3278 269.2914,468.1295 Q269.7278,467.9311 270.1917,467.5039 Z " fill="#000000"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="237.5" x="290.0521" y="469.4112">GpuConvAlgorithmPicker::ReferenceResult</text><line style="stroke:#2FA4E7;stroke-width:1.0416666666666667;" x1="241.1458" x2="548.4375" y1="482.2449" y2="482.2449"/><ellipse cx="251.5625" cy="493.7032" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;fill:none;"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="272.9167" x="265.1042" y="502.6978">algorithm: stream_executor::dnn::AlgorithmDesc</text><ellipse cx="251.5625" cy="517.6147" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;fill:none;"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="247.9167" x="265.1042" y="526.6093">buffer: stream_executor::DeviceMemoryBase</text><line style="stroke:#2FA4E7;stroke-width:1.0416666666666667;" x1="241.1458" x2="548.4375" y1="538.4013" y2="538.4013"/><!--MD5=[0e7febef3315657549ba7faa775ce43a]
class GpuConvAlgorithmPicker--><rect codeLine="8" height="337.9333" id="GpuConvAlgorithmPicker" rx="4.1667" ry="4.1667" style="stroke:#2FA4E7;stroke-width:1.0416666666666667;fill:none;" width="754.1667" x="17.7083" y="17.7083"/><ellipse cx="314.5833" cy="34.8724" fill="#EDF0F2" rx="10.4167" ry="10.4167" style="stroke:#BABDBF;stroke-width:1.0416666666666667;"/><path d="M316.4937,39.2975 Q316.0665,39.5172 315.5965,39.6271 Q315.1265,39.7369 314.6077,39.7369 Q312.7645,39.7369 311.794,38.5223 Q310.8236,37.3077 310.8236,35.0128 Q310.8236,32.7118 311.794,31.4972 Q312.7645,30.2826 314.6077,30.2826 Q315.1265,30.2826 315.6026,30.3925 Q316.0787,30.5023 316.4937,30.722 L316.4937,32.724 Q316.0299,32.2968 315.5935,32.0984 Q315.1571,31.9 314.6932,31.9 Q313.7044,31.9 313.2009,32.6843 Q312.6973,33.4686 312.6973,35.0128 Q312.6973,36.5509 313.2009,37.3352 Q313.7044,38.1195 314.6932,38.1195 Q315.1571,38.1195 315.5935,37.9211 Q316.0299,37.7228 316.4937,37.2955 Z " fill="#000000"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="141.6667" x="339.5833" y="39.2029">GpuConvAlgorithmPicker</text><line style="stroke:#2FA4E7;stroke-width:1.0416666666666667;" x1="18.75" x2="770.8333" y1="52.0365" y2="52.0365"/><rect fill="none" height="6.25" style="stroke:#C82930;stroke-width:1.0416666666666667;" width="6.25" x="26.0417" y="60.3699"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="195.8333" x="42.7083" y="72.4894">stream_exec_: se::StreamExecutor*</text><rect fill="none" height="6.25" style="stroke:#C82930;stroke-width:1.0416666666666667;" width="6.25" x="26.0417" y="84.2814"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="217.7083" x="42.7083" y="96.401">allocator_: se::DeviceMemoryAllocator*</text><rect fill="none" height="6.25" style="stroke:#C82930;stroke-width:1.0416666666666667;" width="6.25" x="26.0417" y="108.193"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="129.1667" x="42.7083" y="120.3125">struct_ReferenceResult</text><line style="stroke:#2FA4E7;stroke-width:1.0416666666666667;" x1="18.75" x2="770.8333" y1="132.1045" y2="132.1045"/><ellipse cx="29.1667" cy="143.5628" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="557.2917" x="42.7083" y="152.5574">GpuConvAlgorithmPicker(stream_exec: se::StreamExecutor*, allocator: se::DeviceMemoryAllocator*)</text><ellipse cx="29.1667" cy="167.4744" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="241.6667" x="42.7083" y="176.4689">Run(module: HloModule*): StatusOr&lt;bool&gt;</text><text fill="#008080" font-family="&quot;Verdana&quot;" font-size="11.4583" font-weight="bold" lengthAdjust="spacing" textLength="48.9583" x="287.5" y="176.4689">override</text><ellipse cx="29.1667" cy="191.3859" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="137.5" x="42.7083" y="200.3805">name(): absl::string_view</text><text fill="#008080" font-family="&quot;Verdana&quot;" font-size="11.4583" font-weight="bold" lengthAdjust="spacing" textLength="48.9583" x="183.3333" y="200.3805">override</text><rect fill="#F24D5C" height="6.25" style="stroke:#C82930;stroke-width:1.0416666666666667;" width="6.25" x="26.0417" y="212.1724"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="392.7083" x="42.7083" y="224.292">RunOnComputation(computation: HloComputation*): StatusOr&lt;bool&gt;</text><rect fill="#F24D5C" height="6.25" style="stroke:#C82930;stroke-width:1.0416666666666667;" width="6.25" x="26.0417" y="236.084"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="325" x="42.7083" y="248.2035">RunOnInstruction(instr: HloInstruction*): StatusOr&lt;bool&gt;</text><rect fill="#F24D5C" height="6.25" style="stroke:#C82930;stroke-width:1.0416666666666667;" width="6.25" x="26.0417" y="259.9955"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="552.0833" x="42.7083" y="272.1151">PickBestAlgorithm(instr: const HloCustomCallInstruction*): StatusOr&lt;tensorflow::AutotuneResult&gt;</text><rect fill="#F24D5C" height="6.25" style="stroke:#C82930;stroke-width:1.0416666666666667;" width="6.25" x="26.0417" y="283.9071"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="717.7083" x="42.7083" y="296.0266">AutotuneOneConvRunner(const GpuConvConfig&amp;, const HloCustomCallInstruction*, ...): StatusOr&lt;tensorflow::AutotuneResult&gt;</text><rect fill="#F24D5C" height="6.25" style="stroke:#C82930;stroke-width:1.0416666666666667;" width="6.25" x="26.0417" y="307.8186"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="614.5833" x="42.7083" y="319.9382">PickBestAlgorithmNoCacheCuda(const HloCustomCallInstruction*, ...): StatusOr&lt;tensorflow::AutotuneResult&gt;</text><rect fill="#F24D5C" height="6.25" style="stroke:#C82930;stroke-width:1.0416666666666667;" width="6.25" x="26.0417" y="331.7301"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="11.4583" lengthAdjust="spacing" textLength="616.6667" x="42.7083" y="343.8497">PickBestAlgorithmNoCacheRocm(const HloCustomCallInstruction*, ...): StatusOr&lt;tensorflow::AutotuneResult&gt;</text><!--MD5=[b03c86a64dc3a4e8a94b999d3a015f56]
link GpuConvAlgorithmPicker to GpuConvAlgorithmPicker::ReferenceResult--><path codeLine="23" d="M772.9167,114.5833 C826.8542,114.5833 802.8125,313.1146 771.875,357.2917 C722.7292,427.4792 633.9583,462.3333 554.8958,479.5938 " fill="none" id="GpuConvAlgorithmPicker-to-GpuConvAlgorithmPicker::ReferenceResult" style="stroke:#008000;stroke-width:1.0416666666666667;stroke-dasharray:7.0,7.0;"/><polygon fill="#008000" points="549.6979,480.7083,559.742,482.7981,554.7884,479.6069,557.9797,474.6533,549.6979,480.7083" style="stroke:#008000;stroke-width:1.0416666666666667;"/><text fill="#343A40" font-family="&quot;Verdana&quot;" font-size="13.5417" lengthAdjust="spacing" textLength="63.5417" x="750" y="407.8837">definition</text><!--MD5=[cb4f4771feee0fc34c9f181fbeeba47a]
@startuml gpu_conv_algorithm_picker
!theme cerulean-outline

class GpuConvAlgorithmPicker::ReferenceResult {
  + algorithm: stream_executor::dnn::AlgorithmDesc
  + buffer: stream_executor::DeviceMemoryBase
}

class GpuConvAlgorithmPicker {
    - {field} stream_exec_: se::StreamExecutor*
    - {field} allocator_: se::DeviceMemoryAllocator*
    - {field} struct_ReferenceResult
    + {method} GpuConvAlgorithmPicker(stream_exec: se::StreamExecutor*, allocator: se::DeviceMemoryAllocator*)
    + {method} Run(module: HloModule*): StatusOr<bool> <b><color:#008080>override</color></b>
    + {method} name(): absl::string_view <b><color:#008080>override</color></b>
    - {method} RunOnComputation(computation: HloComputation*): StatusOr<bool>
    - {method} RunOnInstruction(instr: HloInstruction*): StatusOr<bool>
    - {method} PickBestAlgorithm(instr: const HloCustomCallInstruction*): StatusOr<tensorflow::AutotuneResult>
    - {method} AutotuneOneConvRunner(const GpuConvConfig&, const HloCustomCallInstruction*, ...): StatusOr<tensorflow::AutotuneResult>
    - {method} PickBestAlgorithmNoCacheCuda(const HloCustomCallInstruction*, ...): StatusOr<tensorflow::AutotuneResult>
    - {method} PickBestAlgorithmNoCacheRocm(const HloCustomCallInstruction*, ...): StatusOr<tensorflow::AutotuneResult>
}

GpuConvAlgorithmPicker::struct_ReferenceResult -[#green,dashed,thickness=1]-> GpuConvAlgorithmPicker::ReferenceResult : definition

@enduml

@startuml gpu_conv_algorithm_picker



skinparam backgroundColor transparent
skinparam useBetaStyle false






<style>
  root {
    BackgroundColor transparent
    FontColor #2FA4E7
    HyperLinkColor #FD7E14
    LineColor #2683B9
    LineThickness 1
    Margin 10
    Padding 6
    Shadowing 0.0
  }
  node {
   Padding 15
   roundcorner 20
   BackgroundColor transparent
  }
  caption {
    LineThickness 0
  }
  footer {
    LineThickness 0
  }
  groupHeader {
    BackgroundColor #E9ECEF
    FontColor #033C73
    FontStyle bold
  }
  header {
    LineThickness 0
  }
  referenceHeader {
    BackgroundColor transparent
    FontColor #343A40
    FontStyle bold
  }
  separator {
    BackgroundColor #343A40
    FontColor transparent
    FontStyle bold
  }
  title {
	FontSize 20
	BorderRoundCorner            8
	BorderThickness 	         1
	BackgroundColor  transparent
	FontColor #2FA4E7
	BorderColor #E9ECEF
  }
  nwdiagDiagram {
	network {
			FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent    
		LineColor #2FA4E7
		LineThickness 1.0
		FontColor #2683B9
	}
	server {
			FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
	}
	arrow {
		FontColor #2683B9
		LineColor #2683B9
	}
	group {
		BackGroundColor #F8F9FA
		LineColor $LIGHT_DARK
		LineThickness 2.0
		Margin 5
		Padding 5
	}
  }
  ganttDiagram {
	task {
			FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
		LineColor #2FA4E7
		Margin 10
		Padding 6
	}
	note {
		FontColor #033C73
		LineColor $INFO_DARK
		BackGroundColor transparent
	}
	separator {
		LineColor #BABDBF
		BackGroundColor transparent
		FontColor #BABDBF
	}
	milestone {
		FontColor #033C73
		FontSize 16
		FontStyle italic
		BackGroundColor #E9ECEF
		LineColor #BABDBF
	}
	timeline {
		BackgroundColor #E9ECEF
		FontColor #BABDBF
	}
	closed {
		BackgroundColor $WARNING_DARK
		FontColor #DD5600
	}
  }
</style>
skinparam defaultFontName       "Verdana"
skinparam defaultFontSize       12
skinparam dpi                   100
skinparam shadowing             false
skinparam roundcorner           8
skinparam ParticipantPadding    40
skinparam BoxPadding            40
skinparam Padding               5
skinparam ArrowColor            #868E96
skinparam stereotype {
    CBackgroundColor #EDF0F2
    CBorderColor #BABDBF
    ABackgroundColor #8FB961
    ABorderColor $SUCCESS_DARK
    IBackgroundColor #D2494E
    IBorderColor $DANGER_DARK
    EBackgroundColor #E47833
    EBorderColor $WARNING_DARK
    NBackgroundColor #35638F
    NBorderColor $INFO_DARK
}
skinparam title {
	FontColor	                 #2FA4E7
	BorderColor	                 #BABDBF
	FontSize	    	         20
	BorderRoundCorner            8
	BorderThickness 	         1
	BackgroundColor              transparent
}

skinparam legend {
	BackgroundColor transparent
	BorderColor #BABDBF
	FontColor #343A40
}

skinparam swimlane {
	BorderColor #033C73
	BorderThickness 2
	TitleBackgroundColor  #EDF0F2-#E9ECEF
	TitleFontColor #2FA4E7
}


skinparam activity {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
	BarColor #73A839
	StartColor #033C73
	EndColor #033C73
	DiamondBackgroundColor transparent
  	DiamondBorderColor #BABDBF
	DiamondFontColor #BABDBF
}


skinparam participant {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
	ParticipantBorderThickness 2
}


skinparam actor {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
}


skinparam arrow {
	Thickness 3
	Color #2FA4E7
	FontColor #343A40
}


skinparam sequence {
	BorderColor #2FA4E7
	TitleFontColor #2FA4E7
	BackgroundColor transparent
	StartColor #2FA4E7
	EndColor #2FA4E7
	BoxBackgroundColor transparent
	BoxBorderColor #868E96
	BoxFontColor #343A40
	DelayFontColor #343A40
	LifeLineBorderColor #BABDBF
	LifeLineBorderThickness 2
	LifeLineBackgroundColor transparent
	GroupBorderColor #868E96
	GroupFontColor #343A40
	GroupHeaderFontColor #033C73
	DividerBackgroundColor transparent
    DividerBorderColor #868E96
    DividerBorderThickness 2
    DividerFontColor #343A40
	ReferenceBackgroundColor transparent
	ReferenceBorderColor #868E96
	ReferenceFontColor #343A40
	ReferenceHeaderFontColor #033C73
	StereotypeFontColor #2FA4E7
}


skinparam partition {
	BorderColor #2FA4E7
	FontColor #2FA4E7
	BackgroundColor transparent
}


skinparam collections {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
}


skinparam control {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
}


skinparam entity {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
}


skinparam boundary {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
}


skinparam agent {
	BackgroundColor transparent
	BorderColor #999999
	FontColor #333333
}


skinparam note {
	BorderThickness 1
	BackgroundColor transparent
	BorderColor #033C73
	FontColor #033C73
}


skinparam artifact {
	BackgroundColor transparent
	BorderColor #868E96
	FontColor #868E96
}


skinparam component {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
}


skinparam interface {
	BackgroundColor  transparent
	BorderColor  #C71C22
	FontColor #343A40
}


skinparam storage {
	BackgroundColor transparent
  	BorderColor #DD5600
	FontColor #DD5600
}


skinparam node {
	BackgroundColor transparent
	BorderColor #343A40
	FontColor #343A40
}


skinparam cloud {
	BackgroundColor #F2FCFE-#eeeeee
	BorderColor #F2FCFE
	FontColor #343A40
}


skinparam database {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
}


skinparam class {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
	FontColor #F8F9FA
	HeaderBackgroundColor #2FA4E7-#2683B9
	StereotypeFontColor #343A40
	BorderThickness 1
	AttributeFontColor #343A40
	AttributeFontSize 11
}


skinparam object {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
	StereotypeFontColor #343A40
	BorderThickness 1
	AttributeFontColor #BABDBF
	AttributeFontSize 11
}


skinparam usecase {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
	BorderThickness 2
	StereotypeFontColor #2FA4E7
}


skinparam rectangle {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
	BorderThickness 2
	StereotypeFontColor #2FA4E7
}


skinparam package {
	BackgroundColor transparent
  	BorderColor #2FA4E7
	FontColor #2FA4E7
	BorderThickness 2
}


skinparam folder {
	BackgroundColor transparent
  	BorderColor #DD5600
	FontColor #DD5600
	BorderThickness 2
}


skinparam frame {
	BackgroundColor transparent
  	BorderColor #033C73
	FontColor #033C73
	BorderThickness 2
}


skinparam state {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
	StartColor #033C73
	EndColor #033C73
	AttributeFontColor #BABDBF
	AttributeFontSize 11
}


skinparam queue {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
}


skinparam card {
	BackgroundColor transparent
	BorderColor #033C73
	FontColor #033C73
}


skinparam file {
	BackgroundColor transparent
	BorderColor #868E96
	FontColor #868E96
}


skinparam stack {
		FontColor #2FA4E7
	BorderColor #2FA4E7
	BackgroundColor transparent
}




class GpuConvAlgorithmPicker::ReferenceResult {
  + algorithm: stream_executor::dnn::AlgorithmDesc
  + buffer: stream_executor::DeviceMemoryBase
}

class GpuConvAlgorithmPicker {
    - {field} stream_exec_: se::StreamExecutor*
    - {field} allocator_: se::DeviceMemoryAllocator*
    - {field} struct_ReferenceResult
    + {method} GpuConvAlgorithmPicker(stream_exec: se::StreamExecutor*, allocator: se::DeviceMemoryAllocator*)
    + {method} Run(module: HloModule*): StatusOr<bool> <b><color:#008080>override</color></b>
    + {method} name(): absl::string_view <b><color:#008080>override</color></b>
    - {method} RunOnComputation(computation: HloComputation*): StatusOr<bool>
    - {method} RunOnInstruction(instr: HloInstruction*): StatusOr<bool>
    - {method} PickBestAlgorithm(instr: const HloCustomCallInstruction*): StatusOr<tensorflow::AutotuneResult>
    - {method} AutotuneOneConvRunner(const GpuConvConfig&, const HloCustomCallInstruction*, ...): StatusOr<tensorflow::AutotuneResult>
    - {method} PickBestAlgorithmNoCacheCuda(const HloCustomCallInstruction*, ...): StatusOr<tensorflow::AutotuneResult>
    - {method} PickBestAlgorithmNoCacheRocm(const HloCustomCallInstruction*, ...): StatusOr<tensorflow::AutotuneResult>
}

GpuConvAlgorithmPicker::struct_ReferenceResult -[#green,dashed,thickness=1]-> GpuConvAlgorithmPicker::ReferenceResult : definition

@enduml

PlantUML version 1.2021.16(Thu Dec 09 01:25:22 CST 2021)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>